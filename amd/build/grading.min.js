define("mod_bigbluebuttonbn/grading", 
["exports", "./repository", "core/notification", "core/prefetch", "core/str", "core/loadingicon", "core/modal_factory", "core/modal_events", "core/pending", "core/ajax",
], 
(function (_exports, repository, _notification, _prefetch, _str, _loadingicon, _modal_factory, _modal_events, _pending, _ajax) {
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        }
    }
    var stringsWithKeys = {
        first: "view_grading_yui_first",
        prev: "view_grading_yui_prev",
        next: "view_grading_yui_next",
        last: "view_grading_yui_last",
        goToLabel: "view_grading_yui_page",
        goToAction: "view_grading_yui_go",
        perPage: "view_grading_yui_rows",
        showAll: "view_grading_yui_show_all"
    };
    getTableNode = function (tableSelector) {
        return document.querySelector(tableSelector)
    },
    fetchUsersData = function (tableSelector) {
        var tableNode = getTableNode(tableSelector);
        console.log(tableNode.dataset.bbbid);
        var args = {
            bigbluebuttonbnid: tableNode.dataset.bbbid
        };
        return (0, _ajax.call)([{
            methodname: "mod_bigbluebuttonbn_get_users_list",
            args: args
        }])[0]
    },
    _toConsumableArray = function(arr) {
        return function (arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray(arr)
        }(arr) || function (iter) {
            if ("undefined" != typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) return Array.from(iter)
        }(arr) || _unsupportedIterableToArray(arr) || function () {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }()
    }
    _defineProperty = function (obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj
    }
    ownKeys = function (object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter((function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable
            }))), keys.push.apply(keys, symbols)
        }
        return keys
    }
    setupDatatable = function (tableId, response) {
        const tableData = response.users;
        var stringMap, lang, recordingData = response;
                //var pendingPromise = new _pending.default("mod_bigbluebuttonbn/grading/setupDatatable");
            return Promise.all([(lang = recordingData.locale, new Promise((function (resolve) {
                YUI({
                    lang: lang
                }).use("intl", "datatable", "datatable-sort", "datatable-paginator", "datatype-number", (function (Y) {
                    resolve(Y)
                }))
            }))), (stringMap = Object.keys(stringsWithKeys).map((function (key) {
                return {
                    key: stringsWithKeys[key],
                    component: "mod_bigbluebuttonbn"
                }
            })), (0, _str.get_strings)(stringMap).then((function (stringArray) {
                return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.keys(stringsWithKeys).map((function (key, index) {
                    return _defineProperty({}, key, stringArray[index])
                })))))
            })).catch())]).then((function (_ref4) {
                var _ref5 = _slicedToArray(_ref4, 2),
                    yuiInstance = _ref5[0],
                    strings = _ref5[1];
                return yuiInstance
            })).then((function (yuiInstance) {
                return new yuiInstance.DataTable({
                    // paginatorView: "RecordsPaginatorView",
                    columns: [
                        { key: 'name', width: '200px'},
                        { key: 'mail', width: '200px'},
                        "Grade"
                    ],
                    width: "1195px",
                    // columns: recordingData.columns,
                    data: tableData,
                    rowsPerPage: 5,
                    pageSizes: [5, 10, 50, 100,{ label: 'Show All', value: -1 }],
                    paginatorLocation: ["header", "footer"],
                    // autoSync: !0
                }).render(tableId)
            }))
    };
    _exports.init = function (tableId) {
        fetchUsersData(tableId).then((function (response) {
            console.log(response.users);
            return setupDatatable(tableId, response)
        })).catch(_notification.exception)
    }

}));